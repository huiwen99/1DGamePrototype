/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] ioseg,
    output reg [3:0] iosel,
    input button,
    output reg [8:0] rgb,
    output reg [7:0] iohiseg,
    output reg [3:0] iohisel
  );
  
  
  
  reg rst;
  
  reg btn;
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  wire [16-1:0] M_xalu_alu;
  wire [1-1:0] M_xalu_v;
  wire [1-1:0] M_xalu_z;
  wire [1-1:0] M_xalu_n;
  reg [6-1:0] M_xalu_alufn;
  reg [16-1:0] M_xalu_a;
  reg [16-1:0] M_xalu_b;
  alu_1 xalu (
    .alufn(M_xalu_alufn),
    .a(M_xalu_a),
    .b(M_xalu_b),
    .alu(M_xalu_alu),
    .v(M_xalu_v),
    .z(M_xalu_z),
    .n(M_xalu_n)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_lanebits_d, M_lanebits_q = 1'h0;
  reg [15:0] M_scorereg_d, M_scorereg_q = 1'h0;
  reg [15:0] M_hiscorereg_d, M_hiscorereg_q = 1'h0;
  reg [15:0] M_tribits_d, M_tribits_q = 1'h0;
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_3 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [7-1:0] M_hiscoreseg_seg;
  wire [4-1:0] M_hiscoreseg_sel;
  reg [16-1:0] M_hiscoreseg_values;
  multi_seven_seg_4 hiscoreseg (
    .clk(clk),
    .rst(rst),
    .values(M_hiscoreseg_values),
    .seg(M_hiscoreseg_seg),
    .sel(M_hiscoreseg_sel)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_6 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [1-1:0] M_ctr_value;
  counter_7 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  
  wire [1-1:0] M_b_cond_out;
  button_conditioner_8 b_cond (
    .clk(clk),
    .in(button),
    .out(M_b_cond_out)
  );
  
  wire [24-1:0] M_xlc_laneout;
  reg [16-1:0] M_xlc_lanein;
  laneconvert_9 xlc (
    .lanein(M_xlc_lanein),
    .laneout(M_xlc_laneout)
  );
  
  wire [16-1:0] M_s1_values;
  reg [16-1:0] M_s1_score;
  scoretoseg_10 s1 (
    .score(M_s1_score),
    .values(M_s1_values)
  );
  
  wire [16-1:0] M_his1_values;
  reg [16-1:0] M_his1_score;
  scoretoseg_10 his1 (
    .score(M_his1_score),
    .values(M_his1_values)
  );
  
  wire [9-1:0] M_trianglefsm1_rgb;
  wire [16-1:0] M_trianglefsm1_tribits;
  reg [1-1:0] M_trianglefsm1_btn;
  reg [3-1:0] M_trianglefsm1_cyclestate;
  trianglefsm_12 trianglefsm1 (
    .clk(clk),
    .btn(M_trianglefsm1_btn),
    .cyclestate(M_trianglefsm1_cyclestate),
    .rgb(M_trianglefsm1_rgb),
    .tribits(M_trianglefsm1_tribits)
  );
  
  wire [6-1:0] M_cyclefsm1_alufn;
  wire [1-1:0] M_cyclefsm1_cyclestate;
  wire [16-1:0] M_cyclefsm1_pnum;
  wire [5-1:0] M_cyclefsm1_we;
  wire [2-1:0] M_cyclefsm1_asel;
  wire [2-1:0] M_cyclefsm1_bsel;
  reg [1-1:0] M_cyclefsm1_btn;
  reg [16-1:0] M_cyclefsm1_alu;
  cyclefsm_13 cyclefsm1 (
    .clk(clk),
    .rst(rst),
    .button(button),
    .score(M_scorereg_q),
    .lanelasttwo(M_lanebits_q[0+1-:2]),
    .btn(M_cyclefsm1_btn),
    .alu(M_cyclefsm1_alu),
    .alufn(M_cyclefsm1_alufn),
    .cyclestate(M_cyclefsm1_cyclestate),
    .pnum(M_cyclefsm1_pnum),
    .we(M_cyclefsm1_we),
    .asel(M_cyclefsm1_asel),
    .bsel(M_cyclefsm1_bsel)
  );
  
  always @* begin
    M_scorereg_d = M_scorereg_q;
    M_hiscorereg_d = M_hiscorereg_q;
    M_lanebits_d = M_lanebits_q;
    M_tribits_d = M_tribits_q;
    
    M_xalu_a = 16'h0000;
    M_xalu_b = 16'h0000;
    M_xalu_alufn = 6'h00;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_edge_detector_in = M_ctr_value;
    M_dec_ctr_inc = M_edge_detector_out;
    M_seg_values = 16'h0000;
    ioseg = ~M_seg_seg;
    iosel = M_seg_sel;
    io_led = 24'hffffff;
    M_hiscoreseg_values = 16'h0000;
    iohiseg = ~M_hiscoreseg_seg;
    iohisel = M_hiscoreseg_sel;
    M_edge_detector_in = M_b_cond_out;
    btn = M_edge_detector_out;
    M_trianglefsm1_btn = btn;
    M_cyclefsm1_btn = btn;
    M_cyclefsm1_alu = M_xalu_alu;
    rgb = 9'h1ff;
    M_xlc_lanein = 16'h0000;
    M_s1_score = 16'h0000;
    M_his1_score = 16'h0000;
    M_xalu_alufn = M_cyclefsm1_alufn;
    
    case (M_cyclefsm1_asel)
      1'h0: begin
        a = M_lanebits_q;
      end
      1'h1: begin
        a = M_scorereg_q;
      end
      2'h2: begin
        a = {14'h0000, M_lanebits_q[0+1-:2]};
      end
      default: begin
        a = 16'h0000;
      end
    endcase
    
    case (M_cyclefsm1_bsel)
      1'h0: begin
        b = M_hiscorereg_q;
      end
      1'h1: begin
        b = M_tribits_q;
      end
      2'h2: begin
        b = M_cyclefsm1_pnum;
      end
      default: begin
        b = 16'h0000;
      end
    endcase
    M_xalu_a = a;
    M_xalu_b = b;
    if (M_cyclefsm1_we[0+0-:1] == 1'h1) begin
      M_lanebits_d = 16'h0000;
    end
    if (M_cyclefsm1_we[1+0-:1] == 1'h1) begin
      M_scorereg_d = 16'h0000;
    end
    if (M_cyclefsm1_we[2+0-:1] == 1'h1) begin
      M_lanebits_d = M_xalu_alu;
    end
    if (M_cyclefsm1_we[3+0-:1] == 1'h1) begin
      M_scorereg_d = M_scorereg_q + 1'h1;
    end
    if (M_cyclefsm1_we[4+0-:1] == 1'h1) begin
      M_hiscorereg_d = M_scorereg_q;
    end
    M_xlc_lanein = M_lanebits_q;
    io_led[0+7-:8] = M_xlc_laneout[0+7-:8];
    io_led[8+7-:8] = M_xlc_laneout[8+7-:8];
    io_led[16+7-:8] = M_xlc_laneout[16+7-:8];
    M_s1_score = M_scorereg_q;
    M_seg_values = M_s1_values;
    M_his1_score = M_hiscorereg_q;
    M_hiscoreseg_values = M_his1_values;
    M_trianglefsm1_cyclestate = M_cyclefsm1_cyclestate;
    M_tribits_d = M_trianglefsm1_tribits;
    rgb = M_trianglefsm1_rgb;
  end
  
  always @(posedge clk) begin
    M_lanebits_q <= M_lanebits_d;
    M_scorereg_q <= M_scorereg_d;
    M_hiscorereg_q <= M_hiscorereg_d;
    M_tribits_q <= M_tribits_d;
  end
  
endmodule
